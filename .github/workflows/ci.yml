name: üß™ Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  php-quality-checks:
    name: üîç PHP Quality & Compatibility
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.3', '8.4']
        
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêò Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, json, curl
          tools: composer, phpcs, phpstan
          coverage: none
          
      - name: üìã Validate composer.json
        run: |
          if [ -f composer.json ]; then
            composer validate --strict
          else
            echo "‚úÖ No composer.json found - WordPress plugin doesn't require it"
          fi
          
      - name: üîç PHP Syntax Check
        run: |
          echo "üîç Checking PHP syntax for all PHP files..."
          find . -name "*.php" -not -path "./vendor/*" -not -path "./node_modules/*" | while read file; do
            echo "Checking: $file"
            php -l "$file"
            if [ $? -ne 0 ]; then
              echo "‚ùå Syntax error in: $file"
              exit 1
            fi
          done
          echo "‚úÖ All PHP files have valid syntax!"
          
      - name: üéØ PHP 8.3+ Features Validation
        run: |
          echo "üéØ Validating modern PHP 8.3+ features..."
          
          # Check for strict types declaration
          echo "Checking for strict_types declarations..."
          if ! grep -r "declare(strict_types=1);" --include="*.php" includes/ admin/ >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Warning: Some PHP files may be missing strict_types declarations"
          else
            echo "‚úÖ Strict types declarations found"
          fi
          
          # Check for typed properties
          echo "Checking for typed properties..."
          if grep -r "private.*\$.*;" --include="*.php" includes/ >/dev/null 2>&1; then
            echo "‚úÖ Typed properties detected"
          fi
          
          # Check for return type declarations
          echo "Checking for return type declarations..."
          if grep -r "function.*):.*{" --include="*.php" includes/ >/dev/null 2>&1; then
            echo "‚úÖ Return type declarations found"
          fi
          
          # Check for readonly properties
          echo "Checking for readonly properties..."
          if grep -r "readonly" --include="*.php" includes/ >/dev/null 2>&1; then
            echo "‚úÖ Readonly properties detected"
          fi
          
          echo "üéâ Modern PHP 8.3+ features validation completed!"
          
      - name: üõ°Ô∏è WordPress Security Checks
        run: |
          echo "üõ°Ô∏è Running WordPress security checks..."
          
          # Check for ABSPATH protection
          echo "Checking ABSPATH protection..."
          failed_files=()
          find . -name "*.php" -not -path "./vendor/*" -not -path "./test-*" | while read file; do
            if ! grep -q "ABSPATH" "$file"; then
              echo "‚ö†Ô∏è Missing ABSPATH check: $file"
              failed_files+=("$file")
            fi
          done
          
          # Check for nonce verification in AJAX handlers
          echo "Checking AJAX nonce verification..."
          if grep -r "wp_ajax" --include="*.php" . >/dev/null 2>&1; then
            if grep -r "check_ajax_referer\|wp_verify_nonce" --include="*.php" . >/dev/null 2>&1; then
              echo "‚úÖ AJAX nonce verification found"
            else
              echo "‚ö†Ô∏è Warning: AJAX handlers found but no nonce verification detected"
            fi
          fi
          
          # Check for SQL injection protection
          echo "Checking SQL injection protection..."
          if grep -r "\$wpdb->prepare" --include="*.php" . >/dev/null 2>&1; then
            echo "‚úÖ Prepared statements detected"
          fi
          
          # Check for XSS protection
          echo "Checking XSS protection..."
          if grep -r "esc_html\|esc_attr\|esc_url" --include="*.php" . >/dev/null 2>&1; then
            echo "‚úÖ Output escaping functions detected"
          fi
          
          echo "üéâ Security checks completed!"

  wordpress-compatibility:
    name: üîß WordPress Compatibility
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêò Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, json, curl, mysql
          
      - name: üì¶ Setup WordPress Test Environment
        run: |
          # Download WordPress
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          
          # Check WordPress version compatibility
          WP_VERSION=$(grep "wp_version =" wordpress/wp-includes/version.php | cut -d"'" -f2)
          echo "WordPress version: $WP_VERSION"
          
          # Verify minimum requirements
          if php -r "exit(version_compare('$WP_VERSION', '6.7', '<') ? 1 : 0);"; then
            echo "‚úÖ WordPress $WP_VERSION meets minimum requirement (6.7+)"
          else
            echo "‚ùå WordPress $WP_VERSION does not meet minimum requirement (6.7+)"
            exit 1
          fi
          
      - name: üîç Plugin Structure Validation
        run: |
          echo "üîç Validating WordPress plugin structure..."
          
          # Check main plugin file
          if [ -f "website-llms-txt.php" ]; then
            echo "‚úÖ Main plugin file found"
            
            # Check plugin headers
            if grep -q "Plugin Name:" website-llms-txt.php; then
              echo "‚úÖ Plugin Name header found"
            else
              echo "‚ùå Missing Plugin Name header"
              exit 1
            fi
            
            if grep -q "Version:" website-llms-txt.php; then
              echo "‚úÖ Version header found"
            else
              echo "‚ùå Missing Version header"
              exit 1
            fi
            
            if grep -q "Requires PHP: 8.3" website-llms-txt.php; then
              echo "‚úÖ PHP 8.3+ requirement specified"
            else
              echo "‚ùå Missing or incorrect PHP requirement"
              exit 1
            fi
            
            if grep -q "Requires at least: 6.7" website-llms-txt.php; then
              echo "‚úÖ WordPress 6.7+ requirement specified"
            else
              echo "‚ùå Missing or incorrect WordPress requirement"
              exit 1
            fi
          else
            echo "‚ùå Main plugin file not found"
            exit 1
          fi
          
          # Check directory structure
          for dir in includes admin; do
            if [ -d "$dir" ]; then
              echo "‚úÖ $dir directory found"
            else
              echo "‚ö†Ô∏è $dir directory not found"
            fi
          done
          
          # Check for uninstall
          if [ -f "uninstall.php" ]; then
            echo "‚úÖ Uninstall script found"
          else
            echo "‚ö†Ô∏è No uninstall script found"
          fi
          
          echo "üéâ Plugin structure validation completed!"

  code-standards:
    name: üìè Code Standards & Style
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the build if coding standards have issues
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêò Setup PHP 8.3
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          
      - name: üìè Basic Code Quality Checks
        run: |
          echo "üîç Running basic PHP code quality checks..."
          
          # Check for mixed line endings
          echo "Checking for Windows line endings..."
          if find . -name "*.php" -not -path "./vendor/*" -exec file {} \; | grep -q "CRLF"; then
            echo "‚ö†Ô∏è Found files with Windows line endings (CRLF)"
          else
            echo "‚úÖ All files have correct line endings"
          fi
          
          # Check for trailing whitespace
          echo "Checking for trailing whitespace..."
          trailing_files=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "[[:space:]]$" {} \; 2>/dev/null | head -5)
          if [ -n "$trailing_files" ]; then
            echo "‚ö†Ô∏è Found files with trailing whitespace:"
            echo "$trailing_files"
          else
            echo "‚úÖ No trailing whitespace found"
          fi
          
          # Check for PHP short tags
          echo "Checking for PHP short tags..."
          short_tag_files=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "<?[^p]" {} \; 2>/dev/null | head -5)
          if [ -n "$short_tag_files" ]; then
            echo "‚ö†Ô∏è Found PHP short tags (should use <?php):"
            echo "$short_tag_files"
          else
            echo "‚úÖ No PHP short tags found"
          fi
          
          # Check for consistent indentation (spaces vs tabs)
          echo "Checking for consistent indentation..."
          mixed_indent=$(find . -name "*.php" -not -path "./vendor/*" -exec grep -l "^	.*^    " {} \; 2>/dev/null | head -3)
          if [ -n "$mixed_indent" ]; then
            echo "‚ö†Ô∏è Found files with mixed indentation (tabs and spaces):"
            echo "$mixed_indent"
          else
            echo "‚úÖ Consistent indentation found"
          fi
          
          # Check for proper WordPress file headers
          echo "Checking WordPress plugin structure..."
          if [ -f "website-llms-txt.php" ]; then
            if grep -q "Plugin Name:" website-llms-txt.php && grep -q "Description:" website-llms-txt.php; then
              echo "‚úÖ Plugin headers are properly formatted"
            else
              echo "‚ö†Ô∏è Plugin headers may be incomplete"
            fi
          fi
          
          echo "‚úÖ Basic code quality checks completed"

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the build for security warnings
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üîí Security Vulnerability Scan
        run: |
          echo "üîí Running security vulnerability scan..."
          
          # Check for common WordPress security issues
          echo "Checking for common security vulnerabilities..."
          
          # SQL injection patterns
          if grep -r "\\$_[A-Z].*\\$wpdb" --include="*.php" . 2>/dev/null; then
            echo "‚ö†Ô∏è Potential SQL injection risk detected - review database queries"
          fi
          
          # Direct file access
          if grep -r "\\$_FILES.*move_uploaded_file" --include="*.php" . 2>/dev/null; then
            echo "‚ö†Ô∏è File upload detected - ensure proper validation"
          fi
          
          # eval() usage
          if grep -r "eval(" --include="*.php" . 2>/dev/null; then
            echo "‚ùå eval() usage detected - security risk!"
            exit 1
          fi
          
          # Direct database access without preparation
          if grep -r "\\$wpdb->query.*\\$_" --include="*.php" . 2>/dev/null; then
            echo "‚ö†Ô∏è Potential unsafe database query detected"
          fi
          
          echo "‚úÖ Security scan completed"

  compatibility-matrix:
    name: üß™ PHP Version Matrix Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.3', '8.4']
        
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üêò Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          
      - name: üß™ Test PHP Compatibility
        run: |
          echo "üß™ Testing compatibility with PHP ${{ matrix.php-version }}"
          
          # Test all PHP files can be loaded
          find . -name "*.php" -not -path "./vendor/*" -not -path "./test-*" | while read file; do
            php -f "$file" 2>/dev/null || echo "‚ö†Ô∏è Issue loading: $file"
          done
          
          echo "‚úÖ PHP ${{ matrix.php-version }} compatibility test completed"

  summary:
    name: üìä CI Summary
    runs-on: ubuntu-latest
    needs: [php-quality-checks, wordpress-compatibility, code-standards, security-scan, compatibility-matrix]
    if: always()
    
    steps:
      - name: üìä Generate Summary
        run: |
          echo "## üéâ CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| PHP Quality & Compatibility | ${{ needs.php-quality-checks.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| WordPress Compatibility | ${{ needs.wordpress-compatibility.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Standards | ${{ needs.code-standards.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Compatibility Matrix | ${{ needs.compatibility-matrix.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üöÄ **Plugin Status:** Ready for PHP 8.3+ and WordPress 6.7+" >> $GITHUB_STEP_SUMMARY